// publish jar file to GitHub package
def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

apply plugin: 'maven-publish'
/**
 * GitHub publish artifact it needs file github.properties
 */
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = "sources"
}

publishing {
    // public repo
    repositories {
        maven {
            url = uri("https://maven.pkg.github.com/sophoun/core-utils")
            credentials {
                username = githubProperties["gpr.usr"] ?: System.getenv("USERNAME")
                password = githubProperties["gpr.key"] ?: System.getenv("PASSWORD")
            }
        }
    }
    // local repo
    /*repositories {
        maven {
            url "$buildDir/repo"
        }
    }*/
    publications {
        maven(MavenPublication) {
            groupId 'com.sophoun.android'
            artifactId "navigator"
            version "0.0.1"
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/library-release.aar") {
                builtBy build
            }
            // Add all dependencies to pom.xml file
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                List<DependencySet> dependencySetList = new ArrayList()
                dependencySetList.addAll(configurations.implementation.allDependencies)
                dependencySetList.addAll(configurations.api.allDependencies)
                dependencySetList.each {
                    if (it.group != '' && it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                dependencySetList.clear()
                dependencySetList.addAll(configurations.kapt.allDependencies)
                dependencySetList.each {
                    if (it.group != '' || it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
    }
}