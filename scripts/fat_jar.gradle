android {
    android.libraryVariants.all { variant ->
        task "copyDependencies${variant.name.capitalize()}"() {
            outputs.upToDateWhen { false }
            doLast {
                println "Executing copyDependencies${variant.name.capitalize()}"
                variant.getCompileClasspath().each { fileDependency ->
                    def sourcePath = fileDependency.absolutePath
                    def destinationPath = project.projectDir.path + "/build/dependencies/${variant.name}/"
                    println "Copying dependency:"
                    println sourcePath

                    //The monstrous regex that gets the name of the lib from itâ€™s exploded .aar path
                    def dependencyName
                    if (sourcePath.contains("classes.jar")) {
                        def dependencyNameRegexResult = (sourcePath =~ /.*\/(.*)\.aar\/.*\/jars\/classes\.jar/)
                        if (dependencyNameRegexResult.size() > 0) {
                            dependencyName = dependencyNameRegexResult[0][1]
                            println "Exploded AAR found : ${dependencyName}"
                        }
                    }

                    copy {
                        from sourcePath
                        into destinationPath

                        rename {String filename ->
                            if (filename.contains("classes.jar") && dependencyName != null) {
                                dependencyName = "${dependencyName}.jar"
                                println "Renaming dependency file to : ${dependencyName}"
                                return dependencyName
                            }
                            return filename
                        }
                    }
                }
            }
        }

        task "copyArtifect${variant.name.capitalize()}"(type: Copy) {
            from file("$buildDir/outputs/aar/core-${variant.name}.aar")
            into "$buildDir/dependencies/${variant.name.capitalize()}"
        }

        task "fatJar${variant.name.capitalize()}"(type: Jar) {
            def variantName = variant.name
            archiveBaseName = "fat-$variantName"
            from file("$buildDir/dependencies/$variantName")
            into "$buildDir/libs/"
            exclude 'META-INF/**.*', "com/**"

            dependsOn tasks.named("copyDependencies${variant.name.capitalize()}")
            dependsOn tasks.named("copyArtifect${variant.name.capitalize()}")
        }
    }
}